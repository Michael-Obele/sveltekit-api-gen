/**
 * Example SvelteKit server endpoint with OpenAPI documentation
 * 
 * File: src/routes/api/users/+server.ts
 * 
 * This file demonstrates how to document API endpoints using @swagger JSDoc blocks
 * 
 * Note: This is an example file for documentation purposes.
 * The type errors are expected since it's not in a proper SvelteKit route context.
 */

// @ts-nocheck/**
 * @swagger
 * /api/users:
 *   get:
 *     summary: List all users
 *     description: Retrieve a paginated list of all users in the system
 *     tags:
 *       - Users
 *     parameters:
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           default: 10
 *           minimum: 1
 *           maximum: 100
 *         description: Maximum number of users to return
 *       - in: query
 *         name: offset
 *         schema:
 *           type: integer
 *           default: 0
 *           minimum: 0
 *         description: Number of users to skip
 *     responses:
 *       200:
 *         description: Successfully retrieved users
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 users:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/User'
 *                 total:
 *                   type: integer
 *                   description: Total number of users
 *                 limit:
 *                   type: integer
 *                 offset:
 *                   type: integer
 */
export async function GET({ url }) {
	const limit = Number(url.searchParams.get('limit') || '10');
	const offset = Number(url.searchParams.get('offset') || '0');

	// Implementation here
	return new Response(
		JSON.stringify({
			users: [],
			total: 0,
			limit,
			offset
		}),
		{
			headers: { 'Content-Type': 'application/json' }
		}
	);
}

/**
 * @swagger
 * /api/users:
 *   post:
 *     summary: Create a new user
 *     description: Register a new user account
 *     tags:
 *       - Users
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/UserInput'
 *     responses:
 *       201:
 *         description: User created successfully
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/User'
 *       400:
 *         description: Invalid input
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       409:
 *         description: User already exists
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
export async function POST({ request }) {
	const data = await request.json();

	// Implementation here
	return new Response(JSON.stringify({ id: '123', ...data }), {
		status: 201,
		headers: { 'Content-Type': 'application/json' }
	});
}
